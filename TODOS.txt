 Realizar un programa que realice unos calculos con las notas de unas
 asignaturas pertenecientes a un estudiante. Cálculos:
 
 ------------------- 09 de agosto ---------------------------------
 1. Promedio del semestre: OK
 2. Cuántas notas/asignaturas perdió.
 3. Cuántas asignaturas ganó
 4. Cada asignatura tiene un número de créditos, se debe indicar cuántos créditos
 perdió y cuánto dinero debe pagar para repetir los créditos/asignatura. 
 5. Crear al menos 5 estudiantes con diferentes valores
 6. Crear el proyecto en GitHub 
 
 ------------------- 13 de agosto: ---------------------------------
 1. Cambiar todo el programa anterior para que utilice arreglos
 2. No permitir asignaturas repetidas
 
 ------------------- 19 de agosto: ---------------------------------
 3. Implementar método "addAsignatura", dentro de este método se deben validar las
 siguientes reglas:
 	a. 	No permitir asignaturas repetidas
  b. 	Cada estudiante tiene un número máximo de créditos y cada asignatura
     	también tien un número máximo de créditos. Si el estudiante no tiene 
  	suficientes créditos para agregar la asignatura, el sistema debe indicarle
  	un error. 
  		EJ: Un estudiante tiene 8 créditos
  			Agrega la asignatura X1 = 3 créditos. Se agrega bien 
  			Agrega la asignatura X2 = 4 créditos. Se agrega bien
  			Agrega la asignatura X3 = 3 créditos. Sale error "No tiene créditos suficientes"
  
  Próxima clase:
  	a.	Si sale algún error que no se termine el programa pero que muestre el error
  		y que los objetos que hay en memoria, no se borren.
  	b.	Terminar programa bajo cierto tipo de error (MaxAsignaturasException)

------------------- Sunday, Aug 30  ---------------------------------
1. 

	a) Resolver el problema del tamaño del arreglo. Se debe multiplicar el tamaño del arreglo de asignaturas, cuando se haya llegado al límite del mismo.
	Ej: 
		asignaturas = [{a(0)}, {a(1)}... {a(n-1)}]		
		Tamaño máximo = n = MAX_ASIGNATURAS
		asignaturas.length = n
		cantAsignaturas = n
		Problema: Se debe permitir que el estudiante agregue un número ilimitado de asignaturas. No se pueden agregar nuevas asignaturas por que el arreglo ya está lleno
		
		Solución: Duplicar el tamaño del arreglo
					Pasos
						Crear otro arreglo nuevo arr2 = [{a(0)}, {a(1)}... {a(2n-1)}]
						Pasar todos los elementos del arr (Arreglo original) al arreglo arr1 que tiene el doble del tamaño del arreglo original. De esta manera, se pueden agregar más asignaturas.
						
	b) Subir el cambio a GitHub a más tardar el Sunday, Aug 30
	
------------------- Wednesday, Sep 2  ---------------------------------
1. Ralizar el método llamado insertInPosition(int valor, int p), p es la posición donde se quiere insertar el nuevo nodo. El índice inicial comienza en cero (0)

	Ej 1:
		list = {3, 4, 6, 8, 41}
		insertInPosition(7, 2)		
		Resultado
			list = { 3, 4, 7, 8, 41 }
	Ej 2:
		list = { 98, 35 }
		insertInPosition(50, 0)
		Resultado
			list = {50, 98, 35}
	Ej 3:
		list = {3, 5, 4}
		insertInPosition(1, 5)
		Resultado
			Mensaje de error: "No se puede insertar el elemento 1 en la posición 5"
			
------------------- Thursday, Sep 17  ---------------------------------
1. Contar cuántos números pares hay en una lista
2. Eliminar un número de la lista
3. Buscar un elemento en una lista


=========================== Segundo corte
------------------- Lunes, Sep 28  ---------------------------------
1. Crear un nuevo repositorio en gitHub llamado "pilas-mayor" para almacenar el proyecto
2. Crear una pila de productos. Cada producto tiene: precio, nombre, porcentaje de descuento
3. Crear una estructura de Pila para almacenar estos productos
4. Resolver los siguientes requerimientos:
	4.1. Encontrar el producto más barato
	4.2. Obtener cuánto dinero se otorgó en descuentos
		Ej:
			Producto 1: precio = 100, descuento = 30%
			Producto 2: precio = 300, descuento = 70%
		
			Respuesta:
				El dinero total en descuentos es: 30(primer producto) + 210(segundo producto), por lo tanto, el descuento total es de 240 pesos.
	4.3. Cuál es el nombre del producto con más descuento.
5. Hora máxima de entrega: 7:00 p.m.
6. Se debe subir este proyecto al nuevo repositorio de gitHub "pilas-mayor" que se creó en el paso 1.

------------------- Lunes, Oct 15  ---------------------------------
1. Crear dos pilas A y Buscar
2. Ingresar objetos de tipo Producto a las pilas, cada producto tiene (codigo, nombre, precio, impuesto)
3. Realizar las operaciones de conjuntos sobre las pilas A y B (Unión, Intersección, Diferencia, Complemento)
4. Subir proyecto a nuevo repositorio gitHub, el repositorio debe llamarse "pilas-prj-corte-2"
5. Los conjuntos no admiten elementos repetidos (dos productos con el mismo código)

=========================== Tercer corte
------------------- Fecha de entrega: --------------------------------
1. Crear un nuevo proyecto en GitHub llamado "colas-banco"
2. Crear una nueva operación, insertar(Cliente cliente, int prioridad).
	Ej:
		La prioridad más alta es 1, es decir, si llega un cliente con prioridad = 1. Este cliente pasa a ser el primero en la lista.
		
		Cola = [a, b, c]
		insertar(x, 1)
			Ejemplo 1:
				insertar x con prioridad 1
				La cola debe quedar así:
				Cola = [x, a, b, c]
			Ejemplo 2:
				insertar x con prioridad 2
				La cola debe quedar así:
				Cola = [a, x, b, c]
				
3. Crear varios clientes de prueba con la operación enqueue.
	Crear unos 3 clientes con la operación insert() con diferentes prioridades
	
4. Calcular el cliente con el mayor valor de consignación.

5. Clacular el promedio de valores de consignaciones.

Calendario:
	lunes 26 oct: asesoría del trabajo de colas-banco.
	jueves 29 oct: sustentación del trabajo de colas.
	jueves 5 de nov: Leer datos de un archivo plano.
	lunes 9 de nov: Asignación de proyecto final del curso.
	Jueves 12 de nov: asesoría proyecto final.
	Jueves 19 de nov: Sustentación del proyecto final y notas finales.
	


